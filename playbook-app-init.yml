#############################################################
# Initial App Setup: System group and user, Systemd service #
#############################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/server.yml
    - vars/app.yml
    - vars/env.yml

  tasks:
    - name: Get a user group for a service
      group:
        name: "{{ app_usergroup }}"
        system: yes
        state: present
      tags:
        - user

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ app_username }}"
        groups: "{{ app_usergroup }}"
        state: present
        system: yes
        append: yes
        create_home: false
        shell: /sbin/nologin
      tags:
        - user

    - name: Create a directory for the service
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_username }}"
        group: "{{ app_usergroup }}"
      tags:
        - path

    - name: Create one-shot DB migration
      template:
        src: files/systemd_migrate.j2
        dest: "{{ systemd_migrate_file }}"
        owner: root
        group: root
        mode: "{{ app_files_chmod }}"
        backup: yes
      tags:
        - systemd

    - name: Create one-shot DB rollback
      template:
        src: files/systemd_rollback.j2
        dest: "{{ systemd_rollback_file }}"
        owner: root
        group: root
        mode: "{{ app_files_chmod }}"
        backup: yes
      tags:
        - systemd

    - name: Create the systemd service
      template:
        src: files/systemd_service.j2
        dest: "{{ systemd_service_file }}"
        owner: root
        group: root
        mode: "{{ app_files_chmod }}"
        backup: yes
      tags:
        - systemd

    - name: Create systemd service for scheduling worker
      template:
        src: files/systemd_schedule_service.j2
        dest: "{{ systemd_schedule_service_file }}"
        owner: root
        group: root
        mode: "{{ app_files_chmod }}"
        backup: yes
      tags:
        - systemd

    - name: Create systemd timer for scheduling worker
      template:
        src: files/systemd_schedule_timer.j2
        dest: "{{ systemd_schedule_timer_file }}"
        owner: root
        group: root
        mode: "{{ app_files_chmod }}"
        backup: yes
      tags:
        - systemd

    - name: Create an env file for the systemd service
      template:
        src: files/systemd_env.j2
        dest: "{{ systemd_service_env }}"
        owner: root
        group: root
        mode: "{{ env_files_chmod }}"
      tags:
        - systemd
        - env

    - name: Copy the app file to remote server
      copy:
        src: "{{ app_local_directory }}/{{ app_file }}"
        dest: "{{ app_directory }}/{{ app_file }}"
        owner: "{{ app_username }}"
        group: "{{ app_usergroup }}"
        mode: "{{ app_files_chmod }}"
      tags:
        - copy

    - name: Copy the app resources to remote server
      copy:
        src: "{{ resources_local_directory }}"
        dest: "{{ app_directory }}/{{ app_resources }}"
        owner: "{{ app_username }}"
        group: "{{ app_usergroup }}"
        mode: "{{ app_resources_chmod }}"
      tags:
        - copy

    - name: Run DB migration
      ansible.builtin.systemd:
        name: "{{ systemd_migrate_name }}"
        enabled: yes
        state: started
      tags:
        - systemd

    - name: Enable and start the systemd service
      ansible.builtin.systemd:
        name: "{{ systemd_service_name }}"
        enabled: yes
        state: started
      tags:
        - systemd

    - name: Enable and start the timer for scheduling worker
      ansible.builtin.systemd:
        name: "{{ systemd_schedule_timer_name }}"
        enabled: yes
        state: started
      tags:
        - systemd

    - name: Create nginx config for the service
      template:
        src: files/nginx_service.j2
        dest: "{{ nginx_config_file }}"
        owner: root
        group: root
        mode: "{{ nginx_config_chmod }}"
      tags:
        - nginx

    - name: Create a symlink to nginx config to enable it
      file:
        src: "{{ nginx_config_file }}"
        dest: "{{ nginx_config_symlink }}"
        owner: root
        group: root
        mode: "{{ nginx_config_chmod }}"
        state: link
      tags:
        - nginx

    - name: Restart nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      tags:
        - nginx
        - systemd
